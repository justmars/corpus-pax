{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Using a sqlpyd-fashioned database, create tables for generic users, organizations, and articles, sourcing the data from Github repositories.</p> <pre><code>flowchart TB\nsubgraph dev env\n  pax[corpus-pax]\n  pax--run setup_pax---&gt;db[(sqlite.db)]\nend\nsubgraph /corpus-entities\n  1(members)--github api---pax\n  2(orgs)--github api---pax\nend\nsubgraph /lawsql-articles\n  3(articles)--github api---pax\nend\npax--cloudflare api--&gt;cf(cloudflare images)</code></pre> <p>Each corpus entity in the <code>/corpus-entities</code> repository will contain 2 files: a <code>details.yaml</code> and an <code>avatar.jpeg</code> organized according to the following structure:</p> Text Only<pre><code>&lt;gh-repo&gt;/ # github repository\n\u251c\u2500members/\n    \u251c\u2500&lt;id-of-individual-1&gt;/\n    \u2502 \u251c\u2500details.yaml\n    \u2502 \u2514\u2500avatar.jpeg\n    \u251c\u2500&lt;id-of-individual-2&gt;/\n    \u2502 \u251c\u2500details.yaml\n    \u2502 \u2514\u2500avatar.jpeg\n|-orgs/\n    \u251c\u2500&lt;id-of-org-1&gt;/\n    \u2502 \u251c\u2500details.yaml\n    \u2502 \u2514\u2500avatar.jpeg\n    \u251c\u2500&lt;id-of-org-2&gt;/\n    \u2502 \u251c\u2500details.yaml\n    \u2502 \u2514\u2500avatar.jpeg\n</code></pre> <p>The <code>details.yaml</code> file should contain the key value pairs for the org represented by the id.</p>"},{"location":"#run","title":"Run","text":"Python<pre><code>&gt;&gt;&gt; from corpus_pax import setup_pax\n&gt;&gt;&gt; setup_pax(\"x.db\")\n</code></pre> <p>Since it's hard to correct the m2m tables, <code>setup_pax()</code> drops all the tables first, before adding content.</p> <p><code>setup_pax()</code> is a collection of 3 functions:</p>"},{"location":"#add-individuals","title":"Add individuals","text":"<p>Add/replace records of individuals from an API call.</p> Source code in <code>corpus_pax/__main__.py</code> Python<pre><code>def add_individuals_from_api(c: Connection, replace_img: bool = False):\n\"\"\"Add/replace records of individuals from an API call.\"\"\"\nfor entity_individual in Individual.list_members_repo():\nIndividual.make_or_replace(c, entity_individual[\"url\"], replace_img)\n</code></pre>"},{"location":"#add-organizations","title":"Add organizations","text":"<p>Add/replace records of organizations from an API call.</p> Source code in <code>corpus_pax/__main__.py</code> Python<pre><code>def add_organizations_from_api(c: Connection, replace_img: bool = False):\n\"\"\"Add/replace records of organizations from an API call.\"\"\"\nfor entity_org in Org.list_orgs_repo():\nOrg.make_or_replace(c, entity_org[\"url\"], replace_img)\n</code></pre>"},{"location":"#add-articles","title":"Add articles","text":"<p>Add/replace records of articles from an API call.</p> Source code in <code>corpus_pax/__main__.py</code> Python<pre><code>def add_articles_from_api(c: Connection):\n\"\"\"Add/replace records of articles from an API call.\"\"\"\nfor extracted_data in Article.extract_articles():\nArticle.make_or_replace(c, extracted_data)\n</code></pre>"},{"location":"#prerequisites","title":"Prerequisites","text":""},{"location":"#repositories","title":"Repositories","text":"<p>Different repositories involved:</p> repository status type purpose lawsql-articles private data source used by corpus-pax; yaml-formatted member and org files corpus-entities private data source used by corpus-pax; markdown-styled articles with frontmatter corpus-pax public sqlite i/o functions to create pax-related tables <p>Since data concerning members will be pulled from such repositories, make sure the individual / org fields in resources match the data pulled from <code>corpus-entities</code>.</p> <p>Each avatar image should be named <code>avatar.jpeg</code> so that these can be uploaded to Cloudflare.</p>"},{"location":"#env","title":".env","text":"<p>Create an .env file to create/populate the database. See <code>sample .env</code> highlighting the following variables:</p> <ol> <li>Cloudflare <code>CF_ACCT</code></li> <li>Cloudflare <code>CF_TOKEN</code></li> <li>Github <code>GH_TOKEN</code></li> <li><code>DB_FILE</code> (sqlite)</li> </ol> <p>Note the workflow (main.yml) where the secrets are included for Github actions. Ensure these are set in the repository's <code>&lt;url-to-repo&gt;/settings/secrets/actions</code>, making the proper replacements when the tokens for Cloudflare and Github expire.</p>"},{"location":"articles/","title":"Articles","text":""},{"location":"articles/#corpus_pax.articles-classes","title":"Classes","text":""},{"location":"articles/#corpus_pax.articles.Article","title":"<code>Article</code>","text":"<p>         Bases: <code>TableConfig</code></p> Source code in <code>corpus_pax/articles.py</code> Python<pre><code>class Article(TableConfig):\n__prefix__ = \"pax\"\n__tablename__ = \"articles\"\nurl: HttpUrl = Field(col=str)\nid: str = Field(col=str)\ntitle: str = Field(col=str, fts=True)\ndescription: str = Field(col=str, fts=True)\ndate: datetime.date = Field(..., col=datetime.date, index=True)\ncreated: float = Field(col=float)\nmodified: float = Field(col=float)\ncontent: str = Field(col=str, fts=True)\ntags: list[str] = Field(\ndefault_factory=list,\ntitle=\"Subject Matter\",\ndescription=\"Itemized strings, referring to the topic tag involved.\",\nexclude=True,\n)\nauthors: list[EmailStr] = Field(default_factory=list, exclude=True)\n@classmethod\ndef extract_articles(cls):\n\"\"\"Based on entries from a Github folder, ignore files\n        not formatted in .md and extract the Pydantic-model;\n        the model is based on the frontmatter metadata of each\n        markdown article.\n        \"\"\"\narticles = []\nfor entry in gh.fetch_articles():\nif fn := entry.get(\"name\"):\nif fn.endswith(\".md\"):\nif url := entry.get(\"url\"):\nid = fn.removesuffix(\".md\")\nmodified = gh.fetch_article_date_modified(fn)\ndetails = cls.extract_markdown_postmatter(url)\narticle = cls(id=id, modified=modified, **details)\narticles.append(article)\nreturn articles\n@classmethod\ndef extract_markdown_postmatter(cls, url: str) -&gt; dict:\n\"\"\"Convert the markdown/frontmatter file fetched via url to a dict.\"\"\"\nmdfile = gh.fetch(url)\npost = frontmatter.loads(mdfile.content)\nd = parser.parse(post[\"date\"]).astimezone(ZoneInfo(\"Asia/Manila\"))\nreturn {\n\"url\": url,\n\"created\": d.timestamp(),\n\"date\": d.date(),\n\"title\": post[\"title\"],\n\"description\": post[\"summary\"],\n\"content\": post.content,\n\"authors\": post[\"authors\"],\n\"tags\": post[\"tags\"],\n}\n@classmethod\ndef make_or_replace(cls, c: Connection, extract: Any):\ntbl = c.table(cls)\nrow = tbl.insert(extract.dict(), replace=True, pk=\"id\")  # type: ignore\nif row.last_pk:\nfor author_email in extract.authors:\ntbl.update(row.last_pk).m2m(\nother_table=Individual.__tablename__,\nlookup={\"email\": author_email},\npk=\"id\",\n)\nfor tag in extract.tags:\ntbl.update(row.last_pk).m2m(\nother_table=Tag.__tablename__,\nlookup=Tag(**{\"tag\": tag}).dict(),\n)\n</code></pre>"},{"location":"articles/#corpus_pax.articles.Article-functions","title":"Functions","text":""},{"location":"articles/#corpus_pax.articles.Article.extract_articles","title":"<code>extract_articles()</code>  <code>classmethod</code>","text":"<p>Based on entries from a Github folder, ignore files not formatted in .md and extract the Pydantic-model; the model is based on the frontmatter metadata of each markdown article.</p> Source code in <code>corpus_pax/articles.py</code> Python<pre><code>@classmethod\ndef extract_articles(cls):\n\"\"\"Based on entries from a Github folder, ignore files\n    not formatted in .md and extract the Pydantic-model;\n    the model is based on the frontmatter metadata of each\n    markdown article.\n    \"\"\"\narticles = []\nfor entry in gh.fetch_articles():\nif fn := entry.get(\"name\"):\nif fn.endswith(\".md\"):\nif url := entry.get(\"url\"):\nid = fn.removesuffix(\".md\")\nmodified = gh.fetch_article_date_modified(fn)\ndetails = cls.extract_markdown_postmatter(url)\narticle = cls(id=id, modified=modified, **details)\narticles.append(article)\nreturn articles\n</code></pre>"},{"location":"articles/#corpus_pax.articles.Article.extract_markdown_postmatter","title":"<code>extract_markdown_postmatter(url)</code>  <code>classmethod</code>","text":"<p>Convert the markdown/frontmatter file fetched via url to a dict.</p> Source code in <code>corpus_pax/articles.py</code> Python<pre><code>@classmethod\ndef extract_markdown_postmatter(cls, url: str) -&gt; dict:\n\"\"\"Convert the markdown/frontmatter file fetched via url to a dict.\"\"\"\nmdfile = gh.fetch(url)\npost = frontmatter.loads(mdfile.content)\nd = parser.parse(post[\"date\"]).astimezone(ZoneInfo(\"Asia/Manila\"))\nreturn {\n\"url\": url,\n\"created\": d.timestamp(),\n\"date\": d.date(),\n\"title\": post[\"title\"],\n\"description\": post[\"summary\"],\n\"content\": post.content,\n\"authors\": post[\"authors\"],\n\"tags\": post[\"tags\"],\n}\n</code></pre>"},{"location":"entities/","title":"Entities","text":""},{"location":"entities/#corpus_pax.entities-classes","title":"Classes","text":""},{"location":"entities/#corpus_pax.entities.OrgMember","title":"<code>OrgMember</code>","text":"<p>         Bases: <code>TableConfig</code></p> Source code in <code>corpus_pax/entities.py</code> Python<pre><code>class OrgMember(TableConfig):\n__prefix__ = \"pax\"\n__tablename__ = \"org_members\"\norg_id: str = Field(\n...,\ntitle=\"Org ID\",\ndescription=\"The Org primary key.\",\ncol=str,\nfk=(Org.__tablename__, \"id\"),\n)\nindividual_id: str | None = Field(\nNone,\ntitle=\"Member ID\",\ndescription=(\n\"The Natural Person primary key derived from the account email.\"\n),\ncol=str,\nfk=(Individual.__tablename__, \"id\"),\n)\nrank: conint(strict=True, gt=0, lt=10) = Field(  # type: ignore\n...,\ntitle=\"Rank in Org\",\ndescription=(\n\"Enables ability to customize order of appearance of users within\"\n\" an organization.\"\n),\ncol=int,\n)\nrole: constr(strict=True, max_length=50) = Field(  # type: ignore\n...,\ntitle=\"Role\",\ndescription=(\n\"Descriptive text like 'Managing Partner' or 'Junior Developer',\"\n\" e.g. the role of the individual person within an organization.\"\n),\ncol=str,\n)\naccount_email: EmailStr = Field(\n...,\ntitle=\"Account Email\",\ndescription=(\n\"Lookup the Natural Profile's email to get the individual's id.\"\n),\ncol=str,\n)\n@classmethod\ndef on_insert_add_member_id(cls, c: Connection) -&gt; sqlite3.Cursor:\n\"\"\"Since the original data doesn't contain the `member id` yet,\n        we need to setup up trigger. The trigger will ensure that,\n        on insert of a `OrgMember` row, the email address contained in the row\n        can be used to fetch the member id and include it in the `OrgMember`\n        row just inserted.\n        \"\"\"\nsql = \"update_member_id_on_insert_email.sql\"\nreturn c.db.execute(\npersons_env.get_template(sql).render(\nmembership_tbl=cls.__tablename__,\nindividual_tbl=Individual.__tablename__,\n)\n)\n</code></pre>"},{"location":"entities/#corpus_pax.entities.OrgMember-functions","title":"Functions","text":""},{"location":"entities/#corpus_pax.entities.OrgMember.on_insert_add_member_id","title":"<code>on_insert_add_member_id(c)</code>  <code>classmethod</code>","text":"<p>Since the original data doesn't contain the <code>member id</code> yet, we need to setup up trigger. The trigger will ensure that, on insert of a <code>OrgMember</code> row, the email address contained in the row can be used to fetch the member id and include it in the <code>OrgMember</code> row just inserted.</p> Source code in <code>corpus_pax/entities.py</code> Python<pre><code>@classmethod\ndef on_insert_add_member_id(cls, c: Connection) -&gt; sqlite3.Cursor:\n\"\"\"Since the original data doesn't contain the `member id` yet,\n    we need to setup up trigger. The trigger will ensure that,\n    on insert of a `OrgMember` row, the email address contained in the row\n    can be used to fetch the member id and include it in the `OrgMember`\n    row just inserted.\n    \"\"\"\nsql = \"update_member_id_on_insert_email.sql\"\nreturn c.db.execute(\npersons_env.get_template(sql).render(\nmembership_tbl=cls.__tablename__,\nindividual_tbl=Individual.__tablename__,\n)\n)\n</code></pre>"},{"location":"entities/#corpus_pax.entities.PersonCategory","title":"<code>PersonCategory</code>","text":"<p>         Bases: <code>TableConfig</code></p> Source code in <code>corpus_pax/entities.py</code> Python<pre><code>class PersonCategory(TableConfig):\n__prefix__ = \"pax\"\n__tablename__ = \"categories\"\ncategory: constr(to_lower=True) = Field(  # type: ignore\ncol=str,\ndescription=(\n\"Prelude to a taxonomy of individual / entity categorization, e.g.\"\n\" Lawyer, Law Firm, Accountant, Programmer, etc. When joined with\"\n\" a NaturalProfile or an ArtificialProfile, enables a m2m lookup\"\n\" table to determine the kind of the entity involved.\"\n),\n)\n@classmethod\ndef associate(cls, tbl: Table, tbl_id: str, category_list: list[str]):\n\"\"\"For each category in `category_list`, add a row to an m2m table.\n        The two tables joined will be the `tbl` parameter and\n        `pax_tbl_categories`.\n        \"\"\"\nfor category in category_list:\ntbl.update(tbl_id).m2m(\nother_table=cls.__tablename__,\nlookup=cls(**{\"category\": category}).dict(),\n)\n</code></pre>"},{"location":"entities/#corpus_pax.entities.PersonCategory-functions","title":"Functions","text":""},{"location":"entities/#corpus_pax.entities.PersonCategory.associate","title":"<code>associate(tbl, tbl_id, category_list)</code>  <code>classmethod</code>","text":"<p>For each category in <code>category_list</code>, add a row to an m2m table. The two tables joined will be the <code>tbl</code> parameter and <code>pax_tbl_categories</code>.</p> Source code in <code>corpus_pax/entities.py</code> Python<pre><code>@classmethod\ndef associate(cls, tbl: Table, tbl_id: str, category_list: list[str]):\n\"\"\"For each category in `category_list`, add a row to an m2m table.\n    The two tables joined will be the `tbl` parameter and\n    `pax_tbl_categories`.\n    \"\"\"\nfor category in category_list:\ntbl.update(tbl_id).m2m(\nother_table=cls.__tablename__,\nlookup=cls(**{\"category\": category}).dict(),\n)\n</code></pre>"},{"location":"entities/#corpus_pax.entities.PracticeArea","title":"<code>PracticeArea</code>","text":"<p>         Bases: <code>TableConfig</code></p> Source code in <code>corpus_pax/entities.py</code> Python<pre><code>class PracticeArea(TableConfig):\n__prefix__ = \"pax\"\n__tablename__ = \"areas\"\narea: constr(to_lower=True) = Field(  # type: ignore\ncol=str,\ndescription=(\n\"Prelude to a taxonomy of legal practice areas, e.g. Data\"\n\" Engineering, Family Law, Litigation, etc. When joined with a\"\n\" NaturalProfile or an ArtificialProfile, enables a m2m lookup\"\n\" table to determine the areas of specialization of the entity\"\n\" involved. Relatedly, this is also the tagging mechanism for\"\n\" the Article model.\"\n),\n)\n@classmethod\ndef associate(cls, tbl: Table, tbl_id: str, area_list: list[str]):\n\"\"\"For each area in `area_list`, add a row to an m2m table.\n        The two tables joined will be the `tbl` parameter and\n        `pax_tbl_areas`.\n        \"\"\"\nfor area in area_list:\ntbl.update(tbl_id).m2m(\nother_table=cls.__tablename__,\nlookup=cls(**{\"area\": area}).dict(),\n)\n</code></pre>"},{"location":"entities/#corpus_pax.entities.PracticeArea-functions","title":"Functions","text":""},{"location":"entities/#corpus_pax.entities.PracticeArea.associate","title":"<code>associate(tbl, tbl_id, area_list)</code>  <code>classmethod</code>","text":"<p>For each area in <code>area_list</code>, add a row to an m2m table. The two tables joined will be the <code>tbl</code> parameter and <code>pax_tbl_areas</code>.</p> Source code in <code>corpus_pax/entities.py</code> Python<pre><code>@classmethod\ndef associate(cls, tbl: Table, tbl_id: str, area_list: list[str]):\n\"\"\"For each area in `area_list`, add a row to an m2m table.\n    The two tables joined will be the `tbl` parameter and\n    `pax_tbl_areas`.\n    \"\"\"\nfor area in area_list:\ntbl.update(tbl_id).m2m(\nother_table=cls.__tablename__,\nlookup=cls(**{\"area\": area}).dict(),\n)\n</code></pre>"},{"location":"rationale/","title":"Rationale","text":""},{"location":"rationale/#why-github","title":"Why Github","text":"<p>The names and profiles of individuals and organizations are stored in Github. These are pulled into the application via an API call requiring the use of a personal access token.</p>"},{"location":"rationale/#why-cloudflare-images","title":"Why Cloudflare Images","text":"<p>Individuals and organizations have images stored in Github. To persist and optimize images for the web, I use Cloudflare Images to take advantage of modern image formats and customizable variants.</p>"},{"location":"rationale/#why-sqlite","title":"Why sqlite","text":"<p>The initial data is simple. This database however will be the foundation for a more complicated schema. Sqlite seems a better fit for experimentation and future app use (Android and iOS rely on sqlite).</p>"},{"location":"resources/","title":"Resources","text":""},{"location":"resources/#corpus_pax.resources-attributes","title":"Attributes","text":""},{"location":"resources/#corpus_pax.resources.AVATAR_IMG","title":"<code>AVATAR_IMG = 'avatar.jpeg'</code>  <code>module-attribute</code>","text":"<p>Each member / entity folder will have an <code>avatar.jpeg</code>.</p>"},{"location":"resources/#corpus_pax.resources.DETAILS_FILE","title":"<code>DETAILS_FILE = 'details.yaml'</code>  <code>module-attribute</code>","text":"<p>Each member / entity folder will have a <code>details.yaml</code>.</p>"},{"location":"resources/#corpus_pax.resources-classes","title":"Classes","text":""},{"location":"resources/#corpus_pax.resources.MemberURL","title":"<code>MemberURL</code>","text":"<p>         Bases: <code>NamedTuple</code></p> Name Type Description id str Folder name from the github repository <code>gh</code> img_id str <code>avatar.jpeg</code> stored in Cloudflare target_url str created url from <code>cls.setter()</code> based on the <code>img_id</code> Source code in <code>corpus_pax/resources.py</code> Python<pre><code>class MemberURL(NamedTuple):\n\"\"\"\n    Name | Type | Description\n    :--:|:--:|:--:\n    id | str | Folder name from the github repository `gh`\n    img_id | str | `avatar.jpeg` stored in Cloudflare\n    target_url | str | created url from `cls.setter()` based on the `img_id`\n    \"\"\"\nid: str\nimg_id: str\ntarget_url: str\n@classmethod\ndef setter(cls, url: str, with_img_id: bool = True):\n\"\"\"Assuming a valid `id` url to the github `gh` repo,\n        the `setter()` function will generate the proper `img_id`\n        to use as a filename for the Cloudflare storage area.\"\"\"\nobj = urlparse(url)\nparts = obj.path.split(\"/\")\npk = parts[-1]\nkind = parts[-2]\nimg_id = f\"{kind}-{pk}\"\nnew_url = obj.scheme + \"://\" + obj.netloc + obj.path\nif with_img_id:\ncls.set_avatar_from(img_id, new_url)\nreturn cls(id=pk, img_id=img_id, target_url=new_url)\n@classmethod\ndef set_avatar_from(cls, id: str, url: str) -&gt; str:\n\"\"\"Add the avatar jpeg from Github to Cloudflare,\n        then retrieve the Cloudflare ID.\"\"\"\nobj = f\"{url}/{AVATAR_IMG}\"\nif img_resp := gh.fetch(obj):\nif img_resp.status_code != HTTPStatus.OK:\nraise Exception(\nf\"See {img_resp.status_code=} github file {obj}; avatar\"\nf\" {url=}\"\n)\nif img := io.BytesIO(img_resp.content):\nreturn cf.set_avatar(id, img.read())\nraise Exception(f\"Could not setup avatar {url=}\")\n</code></pre>"},{"location":"resources/#corpus_pax.resources.MemberURL-functions","title":"Functions","text":""},{"location":"resources/#corpus_pax.resources.MemberURL.set_avatar_from","title":"<code>set_avatar_from(id, url)</code>  <code>classmethod</code>","text":"<p>Add the avatar jpeg from Github to Cloudflare, then retrieve the Cloudflare ID.</p> Source code in <code>corpus_pax/resources.py</code> Python<pre><code>@classmethod\ndef set_avatar_from(cls, id: str, url: str) -&gt; str:\n\"\"\"Add the avatar jpeg from Github to Cloudflare,\n    then retrieve the Cloudflare ID.\"\"\"\nobj = f\"{url}/{AVATAR_IMG}\"\nif img_resp := gh.fetch(obj):\nif img_resp.status_code != HTTPStatus.OK:\nraise Exception(\nf\"See {img_resp.status_code=} github file {obj}; avatar\"\nf\" {url=}\"\n)\nif img := io.BytesIO(img_resp.content):\nreturn cf.set_avatar(id, img.read())\nraise Exception(f\"Could not setup avatar {url=}\")\n</code></pre>"},{"location":"resources/#corpus_pax.resources.MemberURL.setter","title":"<code>setter(url, with_img_id=True)</code>  <code>classmethod</code>","text":"<p>Assuming a valid <code>id</code> url to the github <code>gh</code> repo, the <code>setter()</code> function will generate the proper <code>img_id</code> to use as a filename for the Cloudflare storage area.</p> Source code in <code>corpus_pax/resources.py</code> Python<pre><code>@classmethod\ndef setter(cls, url: str, with_img_id: bool = True):\n\"\"\"Assuming a valid `id` url to the github `gh` repo,\n    the `setter()` function will generate the proper `img_id`\n    to use as a filename for the Cloudflare storage area.\"\"\"\nobj = urlparse(url)\nparts = obj.path.split(\"/\")\npk = parts[-1]\nkind = parts[-2]\nimg_id = f\"{kind}-{pk}\"\nnew_url = obj.scheme + \"://\" + obj.netloc + obj.path\nif with_img_id:\ncls.set_avatar_from(img_id, new_url)\nreturn cls(id=pk, img_id=img_id, target_url=new_url)\n</code></pre>"},{"location":"resources/#corpus_pax.resources.RegisteredMember","title":"<code>RegisteredMember</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>Common validator for corpus entities: Individuals and Orgs. Note that the <code>col</code> attribute is for use in <code>sqlpyd</code>.</p> Source code in <code>corpus_pax/resources.py</code> Python<pre><code>class RegisteredMember(BaseModel):\n\"\"\"Common validator for corpus entities: Individuals and Orgs.\n    Note that the `col` attribute is for use in `sqlpyd`.\"\"\"\nid: str = Field(col=str)\ncreated: float = Field(col=float)\nmodified: float = Field(col=float)\nsearch_rank: RankStatus | None = Field(\nRankStatus.Ordinary,\ntitle=\"Search Rank\",\ndescription=\"Can use as a means to determine rank in SERP\",\ncol=int,\n)\nemail: EmailStr = Field(col=str)\nimg_id: str | None = Field(\nNone,\ntitle=\"Cloudflare Image ID\",\ndescription=(\n\"Based on email, upload a unique avatar that can be called via\"\n\" Cloudflare Images.\"\n),\ncol=str,\n)\ndisplay_url: HttpUrl | None = Field(\ntitle=\"Associated URL\",\ndescription=(\n\"When visiting the profile of the member, what URL is associated\"\n\" with the latter?\"\n),\ncol=str,\n)\ndisplay_name: str = Field(\n...,\ntitle=\"Display Name\",\ndescription=\"Preferred way of being designated in the platform.\",\nmin_length=5,\ncol=str,\nfts=True,\n)\ncaption: str | None = Field(\nNone,\ndescription=(\n\"For individuals, the way by which a person is to be known, e.g.\"\n\" Lawyer and Programmer; if an organization, it's motto or quote,\"\n\" i.e. 'just do it'.\"\n),\ncol=str,\n)\ndescription: str | None = Field(\nNone,\ntitle=\"Member Description\",\ndescription=(\n\"Useful for both SEO and for contextualizing the profile object.\"\n),\nmin_length=10,\ncol=str,\nfts=True,\n)\ntwitter: str | None = Field(None, title=\"Twitter username\", col=str)\ngithub: str | None = Field(None, title=\"Github username\", col=str)\nlinkedin: str | None = Field(None, title=\"LinkedIn username\", col=str)\nfacebook: str | None = Field(None, title=\"Facebook page\", col=str)\nareas: list[str] | None = Field(\ndefault_factory=list,\ntitle=\"Practice Areas\",\ndescription=(\n\"Itemized strings, referring to specialization of both natural and\"\n\" artificial persons, that will be mapped to a unique table\"\n),\nexclude=True,\n)\ncategories: list[str] | None = Field(\ndefault_factory=list,\ntitle=\"Entity Categories\",\ndescription=(\n\"Itemized strings, referring to type of entity of both natural\"\n\" (e.g. lawyer) and artificial (e.g. law firm) persons, that will\"\n\" be mapped to a unique table\"\n),\nexclude=True,\n)\nmembers: list[dict[str, int | str | EmailStr]] | None = Field(\ndefault_factory=list, exclude=True\n)\nclass Config:\nuse_enum_values = True\n@classmethod\ndef extract_details(cls, url: str) -&gt; dict:\n\"\"\"Convert the yaml file in the repository to a dict.\"\"\"\nif details_resp := gh.fetch(f\"{url}/{DETAILS_FILE}\"):\nreturn yaml.safe_load(details_resp.content)\nraise Exception(f\"Could not get details from {url=}\")\n@classmethod\ndef from_url(cls, url: str, set_img: bool = False):\n\"\"\"Each member url can be converted to a fully validated object\n        via a valid Github `url`; if `set_img` is set to true,\n        an `img_id` is created on Cloudflare.\"\"\"\nobj = MemberURL.setter(url, set_img)\nreturn cls(\n**cls.extract_details(obj.target_url),\nid=obj.id,\nimg_id=obj.img_id,\ncreated=datetime.datetime.now().timestamp(),\nmodified=datetime.datetime.now().timestamp(),\n)\n</code></pre>"},{"location":"resources/#corpus_pax.resources.RegisteredMember-functions","title":"Functions","text":""},{"location":"resources/#corpus_pax.resources.RegisteredMember.extract_details","title":"<code>extract_details(url)</code>  <code>classmethod</code>","text":"<p>Convert the yaml file in the repository to a dict.</p> Source code in <code>corpus_pax/resources.py</code> Python<pre><code>@classmethod\ndef extract_details(cls, url: str) -&gt; dict:\n\"\"\"Convert the yaml file in the repository to a dict.\"\"\"\nif details_resp := gh.fetch(f\"{url}/{DETAILS_FILE}\"):\nreturn yaml.safe_load(details_resp.content)\nraise Exception(f\"Could not get details from {url=}\")\n</code></pre>"},{"location":"resources/#corpus_pax.resources.RegisteredMember.from_url","title":"<code>from_url(url, set_img=False)</code>  <code>classmethod</code>","text":"<p>Each member url can be converted to a fully validated object via a valid Github <code>url</code>; if <code>set_img</code> is set to true, an <code>img_id</code> is created on Cloudflare.</p> Source code in <code>corpus_pax/resources.py</code> Python<pre><code>@classmethod\ndef from_url(cls, url: str, set_img: bool = False):\n\"\"\"Each member url can be converted to a fully validated object\n    via a valid Github `url`; if `set_img` is set to true,\n    an `img_id` is created on Cloudflare.\"\"\"\nobj = MemberURL.setter(url, set_img)\nreturn cls(\n**cls.extract_details(obj.target_url),\nid=obj.id,\nimg_id=obj.img_id,\ncreated=datetime.datetime.now().timestamp(),\nmodified=datetime.datetime.now().timestamp(),\n)\n</code></pre>"}]}